:Version: 3.1.0 beta 2
:VersionUnderScore: 3_1_0_beta_02
== AMoAdネイティブ広告 SDK {version} Guide for iOS - nativeApp

=== 対応環境

==== デバイス
以下の環境がサポート対象です。

|===
|デバイス |モデル
|iPhone |iPhone3GS、iPhone4、iPhone4S、iPhone5、iPhone5S、iPhone5C、iPhone6、iPhone6 Plus
|iPad |iPad、iPad2、iPad(第3世代以降)、iPad mini、iPad Air、iPad mini Retina
|===

==== OSバージョン
iOS 6.0以上がサポート対象です。

==== 開発環境

Xcode 5.X以降が必要です。

=== 組み込み手順

==== プロジェクトへのSDK追加
Xcode 上で対象プロジェクトに
__libAMoAd_{versionUnderScore}.a__と
__AMoAdNativeView.h__をドラッグ&ドロップします。
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/b88f82bd-dc11-e439-dbee-9d3ae7272981.png[
"ファイル追加", width="100%"]

下記、ダイアログの表示で「Finish」をクリックします。
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/76d04603-c841-2649-399b-6ec4c6416467.png[
"ダイアログ", width="100%"]

ドラッグ&ドロップしたファイルが追加されていれば、
SDKの追加は完了です。
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/ff7eaaf3-c3e2-5453-47d4-1e39a36c0361.png[
"完了", width="100%"]

==== 必須フレームワークの追加￼
本SDKでは下記のフレームワークの追加が必要です。

|===
|Name |Status
|AdSupport.framework |Required
|ImageIO.framework |Required
|===

追加先は、_General_の_Linked Frameworks and Libraries_もしくは
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/dc7c7ed4-470c-1922-e441-bcca7b644cf6.png[
"追加先1", width="100%"]

_Build Phases_の_Link Binary With Libraries_にて
フレームワーク追加します。
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/f3800a0e-1ba5-21b6-2e66-9f01b6922edb.png[
"追加先2", width="100%"]

上記のようにImageIO.framework、AdSupport.framework、libAMoAd_{versionUnderScore}.a（SDKの追加時に説明済み）が追加されていれば完了です。

==== リンクオプションの追加

ターゲットの Build Settings タブを開き、
Linking カテゴリの Other Linker Flags に「-ObjC」 を設定してください。

=== 導入に必要な実装手順（UIView）

==== importが必要なヘッダーファイル
必要なヘッダーファイルは下記のみです。

* `AMoAdNativeView.h`

==== 広告準備および事前取得（prepareAdWithSid）
この処理を実行する事により、SID毎に必要な広告の事前取得を行う。
表示広告種類毎に使用するメソッドを実装してください。

1行テキスト::
_prepareAdWithSid:tag:_

アイコン画像+テキスト::
_prepareAdWithSid:tag:iconPreloading:_

メイン画像+テキスト::
_prepareAdWithSid:tag:iconPreloading:imagePreloading:_

下記はアイコン画像+テキスト用の実装サンプルです。

.SampleViewController.m
[source,objective-c]
----
#import "AMoAdNativeView.h"

- (void)viewDidLoad {
  [[AMoAdNativeViewManager sharedManager]
    prepareAdWithSid:kSid tag:kTag iconPreloading:YES];
}
----

引数については、下記一覧を参照してください。

|===
|引数名 |表示種類 |説明
|sid |共通 |管理画面から発行される SID を設定してください
|tag |共通 |同一リストに対し同一 SID を設定したい場合は Tag (名称任意) を設定する必要がある（同一リスト内において sid + tagがユニークであること）
|iconPreloading |アイコン画像＋テキスト |アイコン画像の読み込み処理タイミングについて。YES：広告取得時に読み込み処理を実施する。NO（デフォルト値）：広告表示時に読み込み処理を実施
|imagePreloading |メイン画像＋テキスト |メイン画像の読み込み処理タイミングについて。YES：広告取得時に読み込み処理を実施する。NO（デフォルト値）：広告表示時に読み込み処理を実施
|===

==== 広告用のレイアウトファイル作成

Interface Builderを使用して、表示広告種類に応じたxibファイルを作成する。

* １行テキスト
* アイコン画像＋テキスト
* メイン画像＋テキスト

===== 各パターン毎に必要なレイアウトを作成する
下記表を参考にレイアウトを作成する

|===
|要素 |クラス |タグ番号
|アイコン画像 |UIImageView |1
|メイン画像 |UIImageView |2
|タイトルショート |UILabel |3
|タイトルロング |UILabel |4
|サービス名 |UILabel |5
|===

===== レイアウト作成サンプル（アイコン画像＋テキスト）

空のXibファイルを新規作成し、UIViewを配置する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/81dcb936-6569-7925-c63b-e4b091e83cd8.png[
"レイアウトサンプル01", width="80%"]

アイコン画像のタグには _1_ を設定する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/1a91b05b-5673-8442-62a6-1ffa2e3aa606.png[
"レイアウトサンプル02", width="80%"]

タイトルロングのタグには _4_ を設定する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/edfe7cc6-9cb7-adcc-2816-a080bb0b743f.png[
"レイアウトサンプル03", width="80%"]

サービス名のタグには _5_ を設定する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/55e0d980-ff12-2134-4ff0-686b4d756194.png[
"レイアウトサンプル04", width="80%"]

==== 広告表示を表示する
下記は広告を表示するサンプルです。

.SampleViewController.m
[source,objective-c]
----
- (void)viewDidLoad {
  UIView *adView =
    [[AMoAdNativeViewManager sharedManager]
      viewWithSid:kSid tag:kTag nibName:kNibName onFailure:
      ^(NSString *sid, NSString *tag, UIView *view) {
        NSLog(@"onFailure: sid=%@ tag=%@ view=%@", sid, tag, view);
      }];
  [adView setFrame:CGRectMake(0, 100, 320, 100)];
  [self.view addSubview:adView];
}
----

==== 広告表示を更新する
下記は広告を更新するサンプルです。

.SampleViewController.m
[source,objective-c]
----
- (IBAction)performButton:(id)sender
{
  [[AMoAdNativeViewManager sharedManager]
    updateAdWithSid:kSid tag:kTag];
}
----

=== その他の実装について

==== ログ出力方法

開発時にSDKのログを出力をしたい場合は、
`AMoAdLogger.h` をimportした上で下記実装を実施する。
`onLogging` ブロックを登録することでログ出力をフックしてカスタマイズできます。

.SampleViewController.m
[source,objective-c]
----
#import "AMoAdLogger.h"

- (void)viewDidLoad {
  [AMoAdLogger sharedLogger].logging = YES;
  [AMoAdLogger sharedLogger].onLogging =
    ^(NSString *message, NSError *error) {
      NSLog(@"【ユーザ定義】%@:%@", message, error);
    };
}
----
